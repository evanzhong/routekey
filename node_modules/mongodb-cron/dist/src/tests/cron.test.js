"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const ava_1 = require("ava");
const moment = require("moment");
const mongodb_1 = require("mongodb");
const es6_sleep_1 = require("es6-sleep");
const __1 = require("..");
ava_1.default.beforeEach((t) => __awaiter(this, void 0, void 0, function* () {
    t.context.mongo = yield mongodb_1.MongoClient.connect('mongodb://localhost:27017', { useNewUrlParser: true });
    t.context.db = t.context.mongo.db('test');
    t.context.collection = t.context.db.collection('jobs');
    try {
        yield t.context.collection.drop();
    }
    catch (e) { }
}));
ava_1.default.afterEach((t) => __awaiter(this, void 0, void 0, function* () {
    yield t.context.mongo.close();
}));
ava_1.default.serial('document with `sleepUntil` should be processed', (t) => __awaiter(this, void 0, void 0, function* () {
    let times = 0;
    const c = new __1.MongoCron({
        collection: t.context.collection,
        lockDuration: 0,
        onDocument: () => times++,
    });
    yield t.context.collection.insertMany([
        { sleepUntil: new Date() },
        { sleepUntil: new Date() },
        { sleepUntil: null },
        { sleepUntil: new Date() },
    ]);
    yield c.start();
    yield es6_sleep_1.promise(3000);
    yield c.stop();
    t.is(times, 3);
    t.is(yield t.context.collection.countDocuments({ sleepUntil: { $ne: null } }), 0);
}));
ava_1.default.serial('cron should trigger event methods', (t) => __awaiter(this, void 0, void 0, function* () {
    let onStart = false;
    let onStop = false;
    let onDocument = false;
    const c = new __1.MongoCron({
        collection: t.context.collection,
        lockDuration: 0,
        onStart: () => __awaiter(this, void 0, void 0, function* () { return onStart = true; }),
        onStop: () => __awaiter(this, void 0, void 0, function* () { return onStop = true; }),
        onDocument: (doc) => __awaiter(this, void 0, void 0, function* () { return onDocument = true; }),
    });
    yield t.context.collection.insertOne({
        sleepUntil: new Date(),
    });
    yield c.start();
    yield es6_sleep_1.promise(300);
    yield c.stop();
    yield es6_sleep_1.promise(100);
    t.is(onStart, true);
    t.is(onStop, true);
    t.is(onDocument, true);
}));
ava_1.default.serial('cron should trigger the `onIdle` handler only once', (t) => __awaiter(this, void 0, void 0, function* () {
    let count = 0;
    const c = new __1.MongoCron({
        collection: t.context.collection,
        lockDuration: 0,
        onIdle: () => count++,
    });
    yield c.start();
    yield es6_sleep_1.promise(1000);
    yield c.stop();
    t.is(count, 1);
}));
ava_1.default.serial('locked documents should not be available for locking', (t) => __awaiter(this, void 0, void 0, function* () {
    let processed = false;
    const future = moment().add(5000, 'milliseconds');
    const c = new __1.MongoCron({
        collection: t.context.collection,
        lockDuration: 5000,
        onDocument: () => processed = true,
    });
    yield t.context.collection.insertOne({
        sleepUntil: future.toDate(),
    });
    yield c.start();
    yield es6_sleep_1.promise(500);
    yield c.stop();
    t.is(processed, false);
}));
ava_1.default.serial('condition should filter lockable documents', (t) => __awaiter(this, void 0, void 0, function* () {
    let count = 0;
    const c = new __1.MongoCron({
        collection: t.context.collection,
        lockDuration: 0,
        condition: { handle: true },
        onDocument: () => count++,
    });
    yield t.context.collection.insertOne({
        handle: true,
        sleepUntil: new Date(),
    });
    yield t.context.collection.insertOne({
        sleepUntil: new Date(),
    });
    yield c.start();
    yield es6_sleep_1.promise(4000);
    yield c.stop();
    t.is(count, 1);
}));
ava_1.default.serial('document processing should not start before `sleepUntil`', (t) => __awaiter(this, void 0, void 0, function* () {
    let ranInFuture = false;
    const future = moment().add(3000, 'milliseconds');
    const c = new __1.MongoCron({
        collection: t.context.collection,
        lockDuration: 0,
        onDocument: (doc) => __awaiter(this, void 0, void 0, function* () { return ranInFuture = moment() >= future; }),
    });
    yield c.start();
    yield t.context.collection.insertOne({
        sleepUntil: future.toDate(),
    });
    yield es6_sleep_1.promise(4000);
    yield c.stop();
    t.is(ranInFuture, true);
}));
ava_1.default.serial('document with `interval` should run repeatedly', (t) => __awaiter(this, void 0, void 0, function* () {
    let repeated = 0;
    const c = new __1.MongoCron({
        collection: t.context.collection,
        lockDuration: 0,
        onDocument: (doc) => __awaiter(this, void 0, void 0, function* () {
            repeated++;
        }),
    });
    yield c.start();
    yield t.context.collection.insertOne({
        sleepUntil: new Date(),
        interval: '* * * * * *',
    });
    yield es6_sleep_1.promise(3100);
    yield c.stop();
    t.is(repeated >= 3, true);
}));
ava_1.default.serial('document should stop recurring at `repeatUntil`', (t) => __awaiter(this, void 0, void 0, function* () {
    let repeated = moment();
    const stop = moment().add(2500, 'milliseconds');
    const c = new __1.MongoCron({
        collection: t.context.collection,
        lockDuration: 0,
        onDocument: (doc) => __awaiter(this, void 0, void 0, function* () { return repeated = moment(); }),
        reprocessDelay: 1000,
    });
    yield c.start();
    yield t.context.collection.insertOne({
        sleepUntil: new Date(),
        interval: '* * * * * *',
        repeatUntil: stop.toDate(),
    });
    yield es6_sleep_1.promise(6000);
    yield c.stop();
    t.is(repeated.isAfter(stop), false);
}));
ava_1.default.serial('document with `autoRemove` should be deleted when completed', (t) => __awaiter(this, void 0, void 0, function* () {
    const c = new __1.MongoCron({
        collection: t.context.collection,
        lockDuration: 0,
    });
    yield c.start();
    yield t.context.collection.insertOne({
        sleepUntil: new Date(),
        autoRemove: true,
    });
    yield es6_sleep_1.promise(2000);
    yield c.stop();
    t.is(yield t.context.collection.countDocuments(), 0);
}));
//# sourceMappingURL=cron.test.js.map